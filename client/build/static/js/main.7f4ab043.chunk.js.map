{"version":3,"sources":["components/userListItem.js","components/userList.js","components/errorListItem.js","components/errorList.js","components/errorFormInput.js","components/errorCreateForm.js","components/createErrorModal.js","App.js","serviceWorker.js","index.js"],"names":["UserListItem","props","react_default","a","createElement","List","Item","className","onClick","onItemClick","Image","avatar","src","anonymous_id","user_id","email","created_at","UserList","state","users","_this","history","push","componentDidMount","_callee","responce","regenerator_default","wrap","_context","prev","next","axios","get","sent","setState","data","stop","this","usersItemArr","map","user","userListItem","Object","assign","key","Header","as","Container","Component","ErrorListItem","imageSrc","err_type","err_message","ErrorList","errors","match","params","errorItemArr","error","errorListItem","_id","ErrorFormInput","Form","Input","fluid","label","name","value","placeholder","onChange","handleChange","ErrorForm","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","event","newState","objectSpread","target","handleSubmit","componentRef","assertThisInitialized","post","userParams","then","response","status","catch","console","log","style","width","Segment","onSubmit","errorFormInput","Button","type","ErrorModal","Modal","trigger","size","Content","image","errorCreateForm","App","createErrorModal","Divider","BrowserRouter","Route","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7f4ab043.chunk.js","sourcesContent":["import React from 'react';\nimport { List, Image } from 'semantic-ui-react'\nimport '../css/listItem.css'\n\nfunction UserListItem(props) {\n    return   <List.Item>\n                <div className=\"list-item\" onClick={props.onItemClick}>\n                    <div><Image avatar src='/images/user.png'/></div>\n                    <div><b>anonymous_id:</b>{props.anonymous_id}</div>\n                    <div><b>user_id:</b>{props.user_id}</div>\n                    <div><b>email:</b>{props.email}</div>\n                    <div><b>created_at:</b>{props.created_at}</div>\n                </div>\n            </List.Item>\n}\n\nexport default UserListItem;","import React, { Component } from 'react';\nimport { List, Container, Header } from 'semantic-ui-react';\nimport UserListItem from './userListItem';\nimport axios from 'axios';\n\nclass UserList extends Component {\n\n    state = {\n        users:[]\n    }\n    onItemClick = (anonymous_id)=>{\n        return ()=>{\n            this.props.history.push('/errorlist/'+anonymous_id);\n        }\n    }\n    componentDidMount= async()=>{\n        const responce = await axios.get('/api/users');\n        this.setState({users:responce.data});\n    }\n    render() {\n      const users = this.state.users;  \n      const onItemClick = this.onItemClick;\n      const usersItemArr = users.map((user)=>{\n          return <UserListItem {...user} key={user.anonymous_id} onItemClick={onItemClick(user.anonymous_id)}/>      \n      });\n      return (\n        <div>\n           <Header as='h2'>User List</Header>\n           <Container>\n           <List>\n               {usersItemArr}\n           </List>\n           </Container>\n        </div>\n        );\n    }\n  }\n  \nexport default UserList;","import React from 'react';\nimport { List, Image } from 'semantic-ui-react'\nimport '../css/listItem.css'\n\nfunction ErrorListItem(props) {\n    const imageSrc = props.err_type === 'error'?'/images/error.png':'/images/warning.png';\n    return   <List.Item>\n                <div className=\"list-item\" onClick={props.onItemClick}>\n                    <div><Image avatar src={imageSrc}/></div>\n                    <div><b>err_type:</b>{props.err_type}</div>\n                    <div><b>err_message:</b>{props.err_message}</div>\n                    <div><b>anonymous_id:</b>{props.anonymous_id}</div>\n                    <div><b>created_at:</b>{props.created_at}</div>\n                </div>\n            </List.Item>\n}\n\nexport default ErrorListItem;","import React, { Component } from 'react';\nimport { List, Container, Header } from 'semantic-ui-react';\nimport axios from 'axios';\nimport ErrorListItem from './errorListItem';\n\nclass ErrorList extends Component {\n\n    state={\n        errors:[]\n    }\n\n    componentDidMount= async()=>{\n        const responce = await axios.get('/api/errors/'+this.props.match.params.anonymous_id);\n        this.setState({errors:responce.data});\n    }\n    render() {\n\n      const errors = this.state.errors;  \n      const errorItemArr = errors.map((error)=>{\n          return <ErrorListItem {...error} key={error._id}/>      \n      });\n    \n      return (\n        <div>\n           <Header as='h2'>Error List</Header>\n           <Container>\n           <List>\n               {errorItemArr}\n           </List>\n           </Container>\n        </div>\n        );\n    }\n  }\n  \nexport default ErrorList;","import React from 'react';\nimport { Form } from 'semantic-ui-react'\n\nfunction ErrorFormInput(props) {\n    return <Form.Input fluid label={props.name} value={props.value} placeholder={props.name} name={props.name} onChange={props.handleChange} />\n}\n\nexport default ErrorFormInput;","import React, { Component } from 'react';\nimport { Button, Form, Segment } from 'semantic-ui-react';\nimport ErrorFormInput from './errorFormInput';\nimport axios from 'axios';\n\nclass ErrorForm extends Component {\n\n    constructor(props){\n        super(props);\n        this.state={\n            anonymous_id:'',\n            err_type:'',\n            err_message:'',\n            email:'',\n            user_id:''\n        }\n    }\n    handleChange = (event)=> {\n        const newState = {...this.state}\n        newState[event.target.name] = event.target.value;\n        this.setState(newState);\n    }\n\n    handleSubmit = ()=>{\n        const componentRef = this;\n        axios.post('/api/errors', {\n            userParams:{\n                anonymous_id:this.state.anonymous_id,\n                email:this.state.email,\n                user_id:this.state.user_id\n            },\n            err_type: this.state.err_type,\n            err_message:this.state.err_message\n          })\n          .then(function (response) {\n            if(response.status===200){\n                componentRef.setState({\n                    anonymous_id:'',\n                    err_type:'',\n                    err_message:'',\n                    email:'',\n                    user_id:''\n                })\n            }\n          })\n          .catch(function (error) {\n            console.log(error);\n          });\n    }\n\n    render() {\n      return (\n        <div style={{width:'100%'}}>\n        <Segment >\n        <Form onSubmit={this.handleSubmit}>\n          <ErrorFormInput name={'anonymous_id'} value={this.state.anonymous_id} handleChange={this.handleChange}></ErrorFormInput>\n          <ErrorFormInput name={'err_type'} value={this.state.err_type}  handleChange={this.handleChange}></ErrorFormInput>\n          <ErrorFormInput name={'err_message'} value={this.state.err_message}  handleChange={this.handleChange}></ErrorFormInput>\n          <hr/>\n          <ErrorFormInput name={'user_id'} value={this.state.user_id}  handleChange={this.handleChange}></ErrorFormInput>\n          <ErrorFormInput name={'email'} value={this.state.email}  handleChange={this.handleChange}></ErrorFormInput>\n\n          <Button type='submit'>Submit</Button>\n        </Form>\n      </Segment>\n      </div>\n      );\n    }\n  }\n  \n  export default ErrorForm;","import React, { Component } from 'react';\nimport { Button, Modal } from 'semantic-ui-react';\nimport ErrorForm from './errorCreateForm';\n\nclass ErrorModal extends Component {\n    render() {\n      return (\n        <Modal trigger={<Button>Create Error</Button>} size={'tiny'}>\n        <Modal.Content image>\n            <ErrorForm></ErrorForm>\n        </Modal.Content>\n      </Modal>\n      );\n    }\n  }\n  \n  export default ErrorModal;","import React, { Component } from 'react';\nimport { Divider } from 'semantic-ui-react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport UserList from './components/userList';\nimport ErrorList from './components/errorList';\n\nimport './App.css';\n\nimport ErrorModal from './components/createErrorModal';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <ErrorModal></ErrorModal>\n        <Divider></Divider>\n        <Router>\n          <div>\n            <Route path=\"/userlist\" component={UserList} />\n            <Route path=\"/errorlist/:anonymous_id\" component={ErrorList} />\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}